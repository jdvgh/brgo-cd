// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: api.proto

package gitserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloneRepoService_CloneRepo_FullMethodName = "/gitserver.CloneRepoService/CloneRepo"
)

// CloneRepoServiceClient is the client API for CloneRepoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloneRepoServiceClient interface {
	CloneRepo(ctx context.Context, in *CloneRepoRequest, opts ...grpc.CallOption) (*CloneRepoResponse, error)
}

type cloneRepoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloneRepoServiceClient(cc grpc.ClientConnInterface) CloneRepoServiceClient {
	return &cloneRepoServiceClient{cc}
}

func (c *cloneRepoServiceClient) CloneRepo(ctx context.Context, in *CloneRepoRequest, opts ...grpc.CallOption) (*CloneRepoResponse, error) {
	out := new(CloneRepoResponse)
	err := c.cc.Invoke(ctx, CloneRepoService_CloneRepo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloneRepoServiceServer is the server API for CloneRepoService service.
// All implementations must embed UnimplementedCloneRepoServiceServer
// for forward compatibility
type CloneRepoServiceServer interface {
	CloneRepo(context.Context, *CloneRepoRequest) (*CloneRepoResponse, error)
	mustEmbedUnimplementedCloneRepoServiceServer()
}

// UnimplementedCloneRepoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloneRepoServiceServer struct {
}

func (UnimplementedCloneRepoServiceServer) CloneRepo(context.Context, *CloneRepoRequest) (*CloneRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneRepo not implemented")
}
func (UnimplementedCloneRepoServiceServer) mustEmbedUnimplementedCloneRepoServiceServer() {}

// UnsafeCloneRepoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloneRepoServiceServer will
// result in compilation errors.
type UnsafeCloneRepoServiceServer interface {
	mustEmbedUnimplementedCloneRepoServiceServer()
}

func RegisterCloneRepoServiceServer(s grpc.ServiceRegistrar, srv CloneRepoServiceServer) {
	s.RegisterService(&CloneRepoService_ServiceDesc, srv)
}

func _CloneRepoService_CloneRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloneRepoServiceServer).CloneRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloneRepoService_CloneRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloneRepoServiceServer).CloneRepo(ctx, req.(*CloneRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloneRepoService_ServiceDesc is the grpc.ServiceDesc for CloneRepoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloneRepoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitserver.CloneRepoService",
	HandlerType: (*CloneRepoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CloneRepo",
			Handler:    _CloneRepoService_CloneRepo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
